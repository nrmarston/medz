<div
  class='relative my-16 flex aspect-square w-full items-center justify-center rounded-full bg-gray-700'
>
  <div class='absolute top-[50%] left-[50%] -translate-x-1/2 -translate-y-1/2'>
    <span id='timer-text' class='font-mono text-6xl md:text-8xl'>25:00</span>
  </div>
  <svg class='h-auto w-full' viewBox='0 0 250 250'>
    <circle
      class='text-green-400/50'
      cx='125'
      cy='125'
      r='120'
      fill='none'
      stroke='currentColor'
      stroke-width='10'></circle>
    <circle
      class='text-green-400'
      id='progress-ring'
      cx='125'
      cy='125'
      r='120'
      fill='none'
      stroke='currentColor'
      stroke-width='10'
      stroke-dasharray='753.98'
      stroke-dashoffset='0'
      stroke-linecap='round'
      transform='rotate(-90 125 125)'></circle>
  </svg>
  <div class='absolute bottom-14 left-1/2 -translate-x-1/2 translate-y-1/2'>
    <button
      id='timer-action'
      class='relative flex cursor-pointer items-center justify-center rounded-full bg-green-400/16 p-2 text-green-100 outline-green-100 hover:bg-green-300/24 focus-visible:outline-1'
    >
      <span data-state='play'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          viewBox='0 0 24 24'
          fill='currentColor'
          class='size-8 translate-x-[1.5px]'
        >
          <path
            fill-rule='evenodd'
            d='M4.5 5.653c0-1.427 1.529-2.33 2.779-1.643l11.54 6.347c1.295.712 1.295 2.573 0 3.286L7.28 19.99c-1.25.687-2.779-.217-2.779-1.643V5.653Z'
            clip-rule='evenodd'></path>
        </svg>
      </span>
      <span data-state='pause' class='hidden'>
        <svg
          xmlns='http://www.w3.org/2000/svg'
          viewBox='0 0 24 24'
          fill='currentColor'
          class='size-8'
        >
          <path
            fill-rule='evenodd'
            d='M6.75 5.25a.75.75 0 0 1 .75-.75H9a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H7.5a.75.75 0 0 1-.75-.75V5.25Zm7.5 0A.75.75 0 0 1 15 4.5h1.5a.75.75 0 0 1 .75.75v13.5a.75.75 0 0 1-.75.75H15a.75.75 0 0 1-.75-.75V5.25Z'
            clip-rule='evenodd'></path>
        </svg>
      </span>
    </button>
  </div>
  <div
    class='absolute top-14 right-1/2 flex translate-x-1/2 translate-y-1/2 gap-2'
    id='cycle-indicator'
  >
    <!-- Circles will be added here via JavaScript -->
  </div>
</div>

<script is:inline>
  const defaultDurations = {
    work: 25 * 60,
    shortBreak: 5 * 60,
    longBreak: 15 * 60,
  };

  const config = {
    autoStartBreaks: true,
    autoStartWork: true,
    totalCycles: 4,
  };

  document.addEventListener('DOMContentLoaded', () => {
    // Add this line to get the tabs element
    const tabsList = document.getElementById('tab-items');

    // Progess ring code starts here
    const ring = document.getElementById('progress-ring');
    const timerText = document.getElementById('timer-text');
    const actionBtn = document.getElementById('timer-action');
    const cycleIndicator = document.getElementById('cycle-indicator');

    let mode = 'work';
    let cycleCount = 0;
    let totalTime = defaultDurations[mode];
    let remainingTime = totalTime;

    const radius = 120;
    const circumference = 2 * Math.PI * radius;

    ring.style.strokeDasharray = circumference;
    ring.style.strokeDashoffset = 0; // full progress at start

    let isRunning = false;

    function updateActionIcon() {
      const playIcon = actionBtn.querySelector('[data-state="play"]');
      const pauseIcon = actionBtn.querySelector('[data-state="pause"]');
      if (isRunning) {
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      } else {
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      }
    }

    function formatTime(seconds) {
      const m = Math.floor(seconds / 60);
      const s = seconds % 60;
      return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
    }

    function updateVisuals() {
      timerText.textContent = formatTime(Math.ceil(remainingTime));
      const percent = remainingTime / totalTime;
      ring.style.strokeDashoffset = (1 - percent) * circumference;
    }

    function renderCycles() {
      cycleIndicator.innerHTML = '';
      for (let i = 0; i < config.totalCycles; i++) {
        const hasStarted = isRunning || cycleCount > 0 || mode !== 'work';
        const isCurrent = hasStarted && i === cycleCount;
        const filled =
          hasStarted && (mode === 'longBreak' || i < cycleCount || isCurrent);
        const dot = document.createElement('div');
        const widthClass = mode === 'work' && isCurrent ? 'w-6' : 'w-3';
        dot.className = `h-3 rounded-full grow transition-all duration-400 ease-in-out ${widthClass} ${filled ? 'bg-green-400' : 'bg-green-400/25'}`;
        cycleIndicator.appendChild(dot);
      }
    }

    function start() {
      const end = Date.now() + remainingTime * 1000;
      isRunning = true;
      updateActionIcon();
      renderCycles();

      function tick() {
        if (!isRunning) return;

        const now = Date.now();

        const secondsLeft = Math.max(0, (end - now) / 1000);
        remainingTime = secondsLeft;

        const percent = Math.max(0, (end - now - 250) / (totalTime * 1000));
        ring.style.strokeDashoffset = (1 - percent) * circumference;

        // Round down for display
        timerText.textContent = formatTime(Math.ceil(remainingTime));

        if (remainingTime > 0.1) {
          requestAnimationFrame(tick);
        } else {
          timerText.textContent = '00:00';
          ring.style.strokeDashoffset = circumference;
          isRunning = false;
          updateActionIcon();
          handleCycleCompletion();
        }
      }

      requestAnimationFrame(tick);
    }

    function pause() {
      isRunning = false;
      updateActionIcon();
    }

    function updateActiveTab() {
      const tabIndex = mode === 'work' ? 1 : mode === 'shortBreak' ? 2 : 3;

      // Remove active class from all tabs
      tabsList.querySelectorAll('li').forEach((tab, index) => {
        if (index + 1 === tabIndex) {
          tab.classList.add('text-shadow', 'bg-green-300', 'text-black');
          tab.classList.remove('text-slate-300');
        } else {
          tab.classList.remove('text-shadow', 'bg-green-300', 'text-black');
          tab.classList.add('text-slate-300');
        }
      });
    }

    function handleCycleCompletion() {
      // Save the finished mode before updating it.
      const finishedMode = mode;

      if (mode === 'work') {
        cycleCount++;
        if (cycleCount >= config.totalCycles) {
          mode = 'longBreak';
          cycleCount = 0;
        } else {
          mode = 'shortBreak';
        }
      } else {
        mode = 'work';
      }

      // Add this line to update the active tab
      updateActiveTab();

      totalTime = defaultDurations[mode];
      remainingTime = totalTime;
      updateVisuals();

      // If a long break has just finished, stop the timer.
      if (finishedMode === 'longBreak') {
        console.log('Completed full session. Timer stopped.');
        renderCycles();
        return;
      }

      if (
        ((mode === 'shortBreak' || mode === 'longBreak') &&
          config.autoStartBreaks) ||
        (mode === 'work' && config.autoStartWork)
      ) {
        start();
      }
      console.log(`Switched to ${mode} tab`);
      renderCycles();
    }

    actionBtn.addEventListener('click', () => {
      if (isRunning) {
        pause();
      } else {
        start();
      }
    });
    document.addEventListener('keydown', (e) => {
      if (e.code === 'Space') {
        e.preventDefault();
        if (isRunning) {
          pause();
        } else {
          start();
        }
      }
    });

    // Set initial text and progress
    updateVisuals();
    renderCycles();
    // Progess ring code ends here

    // Initial tab state
    updateActiveTab();
  });
</script>
